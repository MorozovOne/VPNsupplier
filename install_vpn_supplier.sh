#!/bin/bash

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt update
sudo apt install -y squid python3 python3-pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–µ–π..."
sudo locale-gen ru_RU.UTF-8
sudo update-locale LC_ALL=ru_RU.UTF-8

pip3 install psycopg2-binary requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Squid —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç DDoS –∏ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º Spamhaus
echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Squid —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç DDoS –∏ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º Spamhaus..."
sudo cp /etc/squid/squid.conf /etc/squid/squid.conf.bak  # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥–∞

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ IP
echo "–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç Spamhaus..."
sudo mkdir -p /etc/squid/blacklists
wget -q -O - "https://www.spamhaus.org/drop/drop.txt" | grep -v '^;' | awk '{print $1}' | sudo tee /etc/squid/blacklists/spamhaus_drop.txt > /dev/null
wget -q -O - "https://www.spamhaus.org/drop/edrop.txt" | grep -v '^;' | awk '{print $1}' | sudo tee -a /etc/squid/blacklists/spamhaus_drop.txt > /dev/null

# –ü—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö IP –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ Spamhaus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
cat <<EOL | sudo tee -a /etc/squid/blacklists/spamhaus_drop.txt
1.2.3.4
5.6.7.8
10.0.0.0/24
45.32.0.0/16
185.220.101.0/24
EOL

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Squid
cat <<EOL | sudo tee /etc/squid/squid.conf
http_port 3128
http_access allow all
access_log /var/log/squid/access.log

# –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS
maximum_object_size 10 MB          # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
request_body_max_size 15 MB        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
reply_body_max_size 20 MB          # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
cache_mem 256 MB                   # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫—ç—à–∞
maximum_single_addr 100            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP

# –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ Spamhaus
acl spamhaus_drop src "/etc/squid/blacklists/spamhaus_drop.txt"
http_access deny spamhaus_drop

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
forwarded_for off
via off
EOL

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Squid
sudo systemctl restart squid
sudo systemctl enable squid

# –°–æ–∑–¥–∞–µ–º Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
cat <<EOL > supplier_manager.py
import os
import time
import psycopg2
import requests
import sys

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î
DB_PARAMS = {
    "dbname": "default_db",
    "user": "gen_user",
    "password": "Luq3I)-IGyEEzo",
    "host": "178.253.43.196",
    "port": "5432"
}

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
COUNTRIES = [
    "üá∫üá∏USA", "üá∑üá∫Russia", "üá®üá≥China", "üáÆüá≥India", "üáßüá∑Brazil",
    "üá©üá™Germany", "üáØüáµJapan", "üá¨üáßUnited Kingdom", "üá´üá∑France", "üáÆüáπItaly",
    "üá®üá¶Canada", "üá∞üá∑South Korea", "üá¶üá∫Australia", "üá™üá∏Spain", "üá≤üáΩMexico",
    "üáÆüá©Indonesia", "üáπüá∑Turkey", "üá≥üá±Netherlands", "üá∏üá¶Saudi Arabia", "üá®üá≠Switzerland",
    "üá©üá∞Denmark", "üá≥üá¥Norway", "üá∏üá™Sweden", "üá´üáÆFinland", "üáÆüá∏Iceland",
    "üá≠üá∞Hong Kong", "üá∏üá¨Singapore", "üá¶üá™United Arab Emirates", "üáøüá¶South Africa", "üáπüá≠Thailand",
    "üá¶üá∑Argentina", "üáµüá±Poland", "üá∫üá¶Ukraine"
]

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
def register_supplier():
    supplier_name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ").encode().decode('utf-8', errors='replace')

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
    print("1. –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫")
    print("2. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –†–§")
    payment_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ")

    if payment_choice == "1":
        crypto_wallet = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞: ").encode().decode('utf-8', errors='replace')
        exchange = input("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Binance): ").encode().decode('utf-8', errors='replace')
        payment_method = "crypto"
        card_details = None
    elif payment_choice == "2":
        card_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä): ").encode().decode('utf-8', errors='replace')
        bik = input("–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö –±–∞–Ω–∫–∞ (9 —Ü–∏—Ñ—Ä): ").encode().decode('utf-8', errors='replace')
        cardholder_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã: ").encode().decode('utf-8', errors='replace')
        crypto_wallet = None
        exchange = None
        payment_method = "card"
        card_details = f"{card_number}|{bik}|{cardholder_name}"
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        crypto_wallet = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞: ").encode().decode('utf-8', errors='replace')
        exchange = input("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Binance): ").encode().decode('utf-8', errors='replace')
        payment_method = "crypto"
        card_details = None

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
    for i, country in enumerate(COUNTRIES, 1):
        print(f"{i}. {country}")
    country_idx = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã: ")) - 1
    country = COUNTRIES[country_idx].split(" ")[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î

    print("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã?")
    print("1. –†–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏")
    print("2. –†–∞–∑ –≤ –º–µ—Å—è—Ü")
    freq_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ")
    payout_frequency = "biweekly" if freq_choice == "1" else "monthly"

    ip = requests.get("https://api.ipify.org").text

    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO suppliers (supplier_name, ip_address, country, crypto_wallet, exchange, payout_frequency, payment_method, card_details) "
        "VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING id",
        (supplier_name, ip, country, crypto_wallet, exchange, payout_frequency, payment_method, card_details)
    )
    supplier_id = cursor.fetchone()[0]
    conn.commit()
    cursor.close()
    conn.close()
    return supplier_name, ip, supplier_id, payout_frequency, crypto_wallet, exchange, payment_method, card_details

# –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
def get_traffic():
    total_bytes = 0
    log_file = "/var/log/squid/access.log"
    if os.path.exists(log_file):
        with open(log_file, "r") as log:
            for line in log:
                parts = line.split()
                if len(parts) > 4:
                    total_bytes += int(parts[4])
    return total_bytes / (1024 ** 3)  # –í –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Å—É–º–º—ã –≤ –ë–î
def update_traffic_in_db(supplier_id, traffic_gb):
    payment = traffic_gb * 1.15  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE suppliers SET traffic_gb = traffic_gb + %s, amount_due = amount_due + %s WHERE id = %s",
        (traffic_gb, payment, supplier_id)
    )
    conn.commit()
    cursor.close()
    conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –ë–î –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
def remove_supplier(supplier_id):
    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM suppliers WHERE id = %s", (supplier_id,))
    conn.commit()
    cursor.close()
    conn.close()
    if os.path.exists("supplier_registered"):
        os.remove("supplier_registered")
    print("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ñ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo apt purge squid && rm -f supplier_manager.py")
    sys.exit(0)

# –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
def show_report_instructions(supplier_name, supplier_id, ip, crypto_wallet, exchange, payment_method, card_details, traffic_gb):
    payment = traffic_gb * 1.15  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    print("\n=== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ===")
    print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∏—Å—å–º–æ –Ω–∞ supermanformedia@gmail.com —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    print(f"–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_name}")
    print(f"IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {ip}")
    print(f"–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_gb:.2f} GB")
    print(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment:.2f} ‚ÇΩ")
    if payment_method == "crypto":
        print(f"–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫: {crypto_wallet}")
        print(f"–ë–∏—Ä–∂–∞: {exchange}")
    else:
        card_number, bik, cardholder_name = card_details.split("|")
        print(f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}")
        print(f"–ë–ò–ö: {bik}")
        print(f"–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã: {cardholder_name}")
    print("–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à—É –±–∞–∑—É.")
    update_traffic_in_db(supplier_id, traffic_gb)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(supplier_name, supplier_id, ip, crypto_wallet, exchange, payment_method, card_details):
    while True:
        print("\n=== –ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥ ===")
        print("1. –£–∑–Ω–∞—Ç—å –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞")
        print("2. –£–∑–Ω–∞—Ç—å —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ")
        print("3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–æ—Ñ—Ç –∏ –¥–∞–Ω–Ω—ã–µ")
        print("5. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ")

        traffic_gb = get_traffic()
        if choice == "1":
            print(f"–û–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_gb:.2f} GB")
        elif choice == "2":
            payment = traffic_gb * 1.15  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
            print(f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment:.2f} ‚ÇΩ")
        elif choice == "3":
            show_report_instructions(supplier_name, supplier_id, ip, crypto_wallet, exchange, payment_method, card_details, traffic_gb)
            print("–û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ!")
        elif choice == "4":
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ñ—Ç –∏ –¥–∞–Ω–Ω—ã–µ? (yes/no): ")
            if confirm.lower() == "yes":
                remove_supplier(supplier_id)
        elif choice == "5":
            sys.exit(0)
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    if not os.path.exists("supplier_registered"):
        supplier_name, ip, supplier_id, payout_frequency, crypto_wallet, exchange, payment_method, card_details = register_supplier()
        with open("supplier_registered", "w") as f:
            f.write(f"{supplier_name}|{supplier_id}|{ip}|{crypto_wallet or ''}|{exchange or ''}|{payment_method}|{card_details or ''}")
        print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        with open("supplier_registered", "r") as f:
            data = f.read().strip().split("|")
            if len(data) != 7:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
                print("–§–∞–π–ª supplier_registered –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
                sys.exit(1)
            supplier_name, supplier_id, ip, crypto_wallet, exchange, payment_method, card_details = data
            supplier_id = int(supplier_id)
            if payment_method == "crypto" and not crypto_wallet:
                crypto_wallet = None
            if payment_method == "card" and not card_details:
                card_details = None
    main_menu(supplier_name, supplier_id, ip, crypto_wallet, exchange, payment_method, card_details)
EOL

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
echo "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
python3 supplier_manager.py
